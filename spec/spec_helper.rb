require 'entable'

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'
end

Org     = Struct.new :name
Contact = Struct.new :firstname, :lastname, :phone, :postcode, :org

CONTACTS = []
CONTACTS << Contact.new("Conan",   "Dalton",   "01234567", "75020", Org.new("Softify"))
CONTACTS << Contact.new("Zed",     "Zenumbra", "999999",   "99999", Org.new("Ericsson"))
CONTACTS << Contact.new("Abraham", "Aardvark", "0000000",  "0",     Org.new("Nokia"))
CONTACTS << Contact.new("James",   "Joyce",    "3647583",  "75001", Org.new("Nortel"))

class ContactUpper
  def firstname; contact.firstname.upcase; end
  def lastname;  contact.lastname.upcase;  end
  def phone;     contact.phone;            end
  def postcode;  contact.postcode;         end

  attr_accessor :contact

  def initialize contact
    self.contact = contact
  end
end

class ContactReverse
  attr_accessor :contact, :upcasing, :prefix, :postfix

  def initialize contact, upcasing, prefix, postfix
    @contact, @upcasing, @prefix, @postfix = contact, upcasing, prefix, postfix
  end

  def firstname
    f = contact.firstname.downcase.reverse
    self.upcasing ? f.capitalize : f
  end

  def lastname
    f = contact.lastname.downcase.reverse
    self.upcasing ? f.capitalize : f
  end

  def phone
    prefix + contact.phone
  end

  def postcode
    contact.postcode + postfix
  end
end

class TwiceEverything
  def call collection
    collection.inject([]) { |result, item|
      result << item
      result << item
      result
    }
  end
end

class AlternatingBoolean
  def call collection
    b = true
    collection.inject([]) { |result, item|
      result << [item, b]
      b = !b
      result
    }
  end
end

Entable.add_transformer :sort_by_last_name do |collection|
  collection.sort_by &:lastname
end

Entable.add_transformer :double_each_item, TwiceEverything.new
Entable.add_transformer :alernating_boolean, AlternatingBoolean.new

Entable.add_wrapper :uppercase do |item|
  ContactUpper.new item
end

Entable.add_wrapper :reversi, ContactReverse

class Exporter
  include Entable::XlsExport
  include Entable::HtmlBuilder

  attr_accessor :config

  def initialize config
    self.config = config
  end

  def to_xls items, *args
    build_interpreter(config).to_xls items, *args
  end
end
